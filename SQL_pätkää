CREATE DATABASE record_company

USE record_company


-- bands Table luonti 
-- id column, INT muotoon, ei voi jättää tyhjäksi (NOT NULL), automaattinen juokseva ID (IDENTITY) numerointi 
-- name column, VARCHAR muotoon, ei tyhjää
--"ID" asettaminen primary keyksi 

CREATE TABLE bands (
	id INT NOT NULL IDENTITY(1,1), 
	name VARCHAR(255) NOT NULL 
	PRIMARY KEY (id)
);

-- Uutena FOREIGN KEY joka viittaa "bands" tableen

CREATE TABLE albums (
	id INT NOT NULL IDENTITY(1,1),
	name VARCHAR(255) NOT NULL,
	release_year INT,
	band_id INT NOT NULL,
	PRIMARY KEY (id),
	FOREIGN KEY (band_id) REFERENCES bands(id)
);

-- Lisätään tietoja tauluihin

INSERT INTO bands (name)
VALUES ('Iron Maiden')

INSERT INTO bands (name)
VALUES ('Deuce'), ('Avenged Sevefold'), ('Ankor')

--Tarkastellaan tietoja tauluista

SELECT * 
FROM bands

SELECT TOP(2) name
FROM bands

SELECT name
FROM bands

-- AS uudelleen nimeää columnin tarkastelua varten

SELECT id AS 'ID', name AS 'Band Name'
FROM bands

-- ORDER BY ASC/DESC

SELECT *
FROM bands
ORDER BY name

-- Tiedon lisäilyä

INSERT INTO albums (name, release_year, band_id)
VALUES	('Number of the beast', 1985, 1),
		('Power Slave', 1984, 1),
		('Nightmare', 2018, 2),
		('Nightmare', 2010, 3),
		('Test Album', NULL, 3)

SELECT * FROM albums

-- DISTINCT näyttää kunkin tiedon vain kertaalleen

SELECT DISTINCT name
FROM albums

-- Tiedon päivittämistä

UPDATE albums
SET release_year = 1982
WHERE id = 1

-- Tiedon hakua parametreilla ><, OR, AND, 

SELECT *
FROM albums
WHERE release_year < 2000

SELECT *
FROM albums
WHERE name LIKE '%er%'

SELECT *
FROM albums
WHERE name LIKE '%er%' OR band_id = 2

SELECT *
FROM albums
WHERE release_year = 1984 AND band_id = 1


SELECT *
FROM albums
WHERE release_year BETWEEN 2000 AND 2018

SELECT *
FROM albums
WHERE release_year IS NULL

DELETE
FROM albums
WHERE id = 5

-- Tiedon yhdistelyä

SELECT *
FROM bands
JOIN albums ON bands.id = albums.band_id

SELECT *
FROM bands
LEFT JOIN albums ON bands.id = albums.band_id

-- AVG, SUM, COUNT.... GROUP BY

SELECT AVG (release_year)
FROM albums

SELECT band_id, COUNT(band_id)
FROM albums
GROUP BY band_id

-- Valitaan ja nimetään uudelleen. Käytetään COUNT. 
-- Liitetään. 
-- Järkkäillään.

SELECT b.name AS band_name, COUNT(a.id) AS num_albums
FROM bands AS b
LEFT JOIN albums AS a ON b.id = a.band_id
GROUP BY b.name
--HAVING voi käyttää WHERE tapaan, mutta GROUP BY jälkeen.
